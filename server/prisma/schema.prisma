//
// SETUP
//
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//
// REPORT_SCHEMA
//

// Enums
enum WorkLocation {
  Remote
  Office
  Hybrid
}

enum WorkFlow {
  FullTime
  PartTime
  Freelance
  Substitute
  CallGuard
  Internship
  Other
}

enum PaymentInterval {
  Hourly
  Monthly
  Yearly
  Weekly
  Daily
}

enum CompanySize {
  Small
  Medium
  Large
}

enum Sector {
  Public
  Private
}

enum EducationGrade {
  PrimarySchool
  HighSchool
  CertificateOfApprenticeship
  VocationalSchool
  Bachelor
  Master
  PhD
}

enum Gender {
  Male
  Female
  Other
}

enum AverageGrade {
  A
  B
  C
  D
  E
  F
}

type Degree {
  name          String
  graduateYear  Int
  yearsInSchool Int
  grade         EducationGrade

  graduateSchool String?
  averageGrade   AverageGrade?
}

type Education {
  degrees Degree[]
}

type PersonalInformation {
  age    Int
  gender Gender
  county String
}

type Job {
  // Required
  jobTitle                   String
  field                      String
  estimatedTotalYearlySalary Int
  county                     String
  tags                       String[]
  years                      Int
  workTimePercentage         Int
  vacationDays               Int
  workLocation               WorkLocation
  workFlow                   WorkFlow
  paymentInterval            PaymentInterval
  sector                     Sector

  // Optional
  leadership           Boolean?
  flextime             Boolean?
  seniority            String?
  hourlyWage           Int?
  overtime             Boolean?
  overTimePercentage   Int?
  bonusPercentage      Int?
  stockOptions         Boolean?
  companySize          CompanySize?
  otherCompenSations   String[]
  otherBenefits        String[]
  otherComments        String?
  // Turnus
  rotation             Boolean?
  shiftWork            Boolean?
  estimatedWeeklyHours Int?
}

// Main model
model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  personalInformation PersonalInformation

  education Education

  currentJob Job

  otherFieldExperiences String[]

  // Generated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId  String?  @db.ObjectId
  author    User?    @relation(fields: [authorId], references: [id])
  threadIds String[] @db.ObjectId
  threads   Thread[] @relation(fields: [threadIds], references: [id])
}

//
//  COMMENT_SCHEMA
//

type SubComment {
  // Required
  id        String
  content   String
  updatedAt DateTime

  // Generated
  createdAt DateTime @default(now())
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Required
  content String

  // Optional

  // Generated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subComments SubComment[]
  threadId    String       @db.ObjectId
  thread      Thread       @relation(fields: [threadId], references: [id])
  userId      String?      @db.ObjectId
  user        User?        @relation(fields: [userId], references: [id])
}

//
//  THREAD_SCHEMA
//
model Thread {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Required
  title String
  urlId String @unique

  // Generated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reportIds String[]  @db.ObjectId
  reports   Report[]  @relation(fields: [reportIds], references: [id])
  comments  Comment[]
}

//
// ERROR_LOG_SCHEMA
//
model ErrorLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Required
  message String
  stack   String

  // Generated 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

//
//  USER_SCHEMA
//
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Generated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ErrorLog ErrorLog[]
  Comment  Comment[]
  Report   Report[]
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
